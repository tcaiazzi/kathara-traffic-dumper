import argparse
import os.path
import sys
import time
import logging
from Kathara.parser.netkit.LabParser import LabParser
from Kathara.manager.Kathara import Kathara
from fs import open_fs
from fs.copy import copy_dir

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='A tool for dumping all the traffic generated by a Kathar√° network scenario.',
        add_help=True
    )

    parser.add_argument(
        "--network-scenario",
        help='The path to the network scenario to run.',
        required=True
    )

    parser.add_argument(
        "--dump-time",
        type=int,
        help="The time to wait while dumping the traffic.",
    )

    args = parser.parse_args(sys.argv[1:])
    lab_path = os.path.abspath(args.network_scenario)
    lab_name = os.path.split(lab_path)[-1]
    dump_time = args.dump_time if args.dump_time else 10
    results_path = "pcaps"

    logging.basicConfig(
        level=logging.INFO, format="%(message)s"
    )
    logger = logging.getLogger("kathara-dumper")

    logger.info(f"Parsing network scenario in: {lab_path}")
    lab = LabParser.parse(lab_path)

    logger.info(f"Adding dumper device.")
    dumper = lab.new_machine("dumper")

    lab.create_file_from_string("", "dumper.startup")

    for cd_name, cd in lab.links.items():
        dumper_interface = lab.connect_machine_obj_to_link(dumper, cd_name)

        command = f"tcpdump -i eth{dumper_interface.num} -w /shared/{cd_name}.pcap &\n"

        logger.debug(f"Adding command to dumper: {command}")
        lab.update_file_from_string(
            command,
            "dumper.startup"
        )

    logger.info("Deploying network scenario...")
    Kathara.get_instance().deploy_lab(lab, selected_machines={"dumper"})
    machines = set(lab.machines.keys())
    machines.remove("dumper")
    Kathara.get_instance().deploy_lab(lab, selected_machines=machines)

    logger.info("Network scenario deployed!")

    logger.info(f"Dumping traffic for {dump_time} seconds...")
    time.sleep(dump_time)

    logger.info(f"Stopping packet dumpers...")
    Kathara.get_instance().exec_obj(dumper, "killall tcpdump")

    logger.info("Undeploying network scenario...")
    Kathara.get_instance().wipe()
    logger.info("Network scenario undeployed!")

    logger.info(f"Copying pcaps...")
    result_fs = open_fs(f"osfs://{results_path}")
    if result_fs.exists(lab_name):
        result_fs.removetree(lab_name)
    result_fs.makedirs(lab_name, recreate=True)

    copy_dir(lab.fs, "/shared", result_fs, lab_name)
    lab.fs.removetree("/shared/")
    logger.info(f"Results written in: {os.path.join(results_path, lab_name)}")
